//
// Module CatRecognizer2020_lib.stimulus
//
// Created:
//          by - eldadha.UNKNOWN (L118W111)
//          at - 15:23:16 01/ 3/2020
//
// Generated by Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
//

`resetall
`timescale 1ns/10ps
`include "params.v"
 import classes::*; 

module stimulus #(parameter clock_period = 40)
( 
  Interfaces.stimulus stimIf
);


// Initialize
initial begin   
  stimIf.psel = 0;
  stimIf.past_penable = 0;
  stimIf.penable = 0;
  stimIf.paddr = 0;
  stimIf.pwdata = 0;
  stimIf.pwrite = 0;
  stimIf.pix_data = 0;
  stimIf.weight_data = 0;
  
  //Reset check
  stimIf.rst=1;
  repeat (1) @ (posedge stimIf.clk);
  stimIf.rst=0; 
  repeat (1) @ (posedge stimIf.clk);
  stimIf.rst=1;
  $display("time: %d finished reset", $time, ) ;
end

//clock creation
initial begin
  stimIf.clk = 0;
  //stimIf.clk = #19 ~stimIf.clk;
  forever stimIf.clk = #(clock_period/2) ~stimIf.clk;
end

integer i, j;

  //====================================================//
  //-------------recieving data from images-------------//
  //====================================================//
    reg [`PIXEL_PRECISION-1:0] pix1;
    reg [`PIXEL_PRECISION-1:0] pix2;
    reg [`WEIGHT_BIAS_PRECISION-1:0] weight1;
    reg [`WEIGHT_BIAS_PRECISION-1:0] weight2;
    reg [`WEIGHT_BIAS_PRECISION-1:0] bias;
    
    //instantiate random inputs
      RandCat rand_obj = new();
      RandAll rand_all = new();
    
    task itoa;
    input integer i;
    output string str;
    begin
      str.itoa(i);
    end
    endtask

initial begin
    string imageStr;
    string i_str;
    integer scan_file, file_pix, file_weight, file_bias;
    //imageStr = "../hds/@cat@recognizer@fast/symbol.sb.user/Python/TestBenchInputFiles/Image8Pixeln.txt";
  #(3.5*clock_period)
  stimIf.psel = 0;     //move to IDLE
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  #clock_period 
  
    
    
    
    
    file_bias = $fopen("../hds/@cat@recognizer@fast/symbol.sb.user/Python/HardwareInputFiles/Bias8.txt", "r");
    scan_file = $fscanf(file_bias,"%d\n",bias);
    $fclose(file_bias);
    
    for ( i = 0 ; i < 40 ; i = i+1)
    begin
      itoa(i,i_str);
      //imageStr.putc(81,byte'(i_str));
      imageStr ={"../hds/@cat@recognizer@fast/symbol.sb.user/Python/TestBenchInputFiles/Image8Pixel",i_str,".txt"};
      $display(imageStr);
      file_pix = $fopen(imageStr, "r");
      file_weight = $fopen("../hds/@cat@recognizer@fast/symbol.sb.user/Python/HardwareInputFiles/WeightsPrecision8pixel8.txt", "r");
      
      for( j = 1 ; j < `NUMBER_OF_PIXELS ; j = j + 2 )
      begin
        scan_file = $fscanf(file_pix,"%d\n",pix1);
        scan_file = $fscanf(file_pix,"%d\n",pix2);
        scan_file = $fscanf(file_weight,"%d\n",weight1);
        scan_file = $fscanf(file_weight,"%d\n",weight2);
        
        stimIf.psel = 1;       //move to SETUP
        stimIf.past_penable = stimIf.penable;
        stimIf.penable = 0;
        stimIf.pwrite = 1;
        stimIf.paddr = j;
        
        stimIf.pwdata[`PIXEL_PRECISION-1:0] = pix1;
        stimIf.pwdata[2*`PIXEL_PRECISION-1-:`PIXEL_PRECISION] = pix2;
        stimIf.pwdata[`AMBA_WORD-`WEIGHT_BIAS_PRECISION-1-:`WEIGHT_BIAS_PRECISION] = weight1;
        stimIf.pwdata[`AMBA_WORD-1-:`WEIGHT_BIAS_PRECISION] = weight2;
        
        stimIf.pix_data = pix1;
        stimIf.weight_data = weight1;
        
        #clock_period
        
        stimIf.pix_data = pix2;
        stimIf.weight_data = weight2;
        stimIf.past_penable = stimIf.penable;
        stimIf.penable = 1;    //move to ACCESS
        
        while(~stimIf.pready) #clock_period;
      
      end
      
      $fclose(file_pix);
      $fclose(file_weight);
      
      stimIf.past_penable = stimIf.penable;
      stimIf.penable = 0;    //move to SETUP
      stimIf.paddr = `NUMBER_OF_PIXELS+1;
     
      stimIf.pwdata = {{(`AMBA_WORD-`WEIGHT_BIAS_PRECISION){1'b0}},bias};
      #clock_period
      
      stimIf.past_penable = stimIf.penable;
      stimIf.penable = 1;    //move to ACCESS
      
      while(~stimIf.pready) #clock_period;
    
    end
  
  //====================================================//
  //---------------------Write data---------------------//
  //====================================================//
 for (j=0 ; j<800 ; j = j+1)
 begin
  for (i = 1 ; i < (`NUMBER_OF_PIXELS) ; i = i+2)
  begin
    
    stimIf.psel = 1;       //move to SETUP
    stimIf.past_penable = stimIf.penable;
    stimIf.penable = 0;
    stimIf.pwrite = 1;
    stimIf.paddr = i;
 
    assert(rand_obj.randomize());  // randomize the transmition
    // randomize pwdata and set it to interface
    stimIf.pwdata = rand_obj.pwdata;

    stimIf.pix_data = stimIf.pwdata[`PIXEL_PRECISION-1:0];  //value of pix 1 for the coverage
    stimIf.weight_data = stimIf.pwdata[`AMBA_WORD-`WEIGHT_BIAS_PRECISION-1-:`WEIGHT_BIAS_PRECISION];//value of weght 1 for the coverage
    #clock_period
    
    stimIf.pix_data = stimIf.pwdata[2*`PIXEL_PRECISION-1-:`PIXEL_PRECISION]; //value of pix 2 for the coverage
    stimIf.weight_data = stimIf.pwdata[`AMBA_WORD-1-:`WEIGHT_BIAS_PRECISION];//value of weght 2 for the coverage
    
    stimIf.past_penable = stimIf.penable;
    stimIf.penable = 1;    //move to ACCESS
    
    while(~stimIf.pready) #clock_period;
    
  end
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  stimIf.paddr = `NUMBER_OF_PIXELS+1;
  stimIf.pwdata = rand_obj.bias;
  
  /*randomize(stimIf.pwdata) with  // randomize bias
  {
    stimIf.pwdata < 2**(`WEIGHT_BIAS_PRECISION);
  };*/
   
  #clock_period
  
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 1;
  
  while(~stimIf.pready) #clock_period;
      
end

  //====================================================//
  //----------------------Read data---------------------//
  //====================================================//
 for (j=0 ; j<100 ; j = j+1)
 begin
  for (i = 1 ; i < (`NUMBER_OF_PIXELS) ; i = i+1)
  begin
    stimIf.psel = 1;       //move to SETUP
    stimIf.past_penable = stimIf.penable;
    stimIf.penable = 0;
    stimIf.pwrite = 0;
    
    
    assert(rand_obj.randomize());  // randomize the address
    //randomize paddr and set it to interface
    stimIf.paddr = rand_obj.paddr_no_bias;
    /* randomize(stimIf.paddr) with // randomize address
    {
      stimIf.paddr > 0;
      stimIf.paddr <=`NUMBER_OF_PIXELS+1;
    }; */
    #clock_period
    
    stimIf.past_penable = stimIf.penable;
    stimIf.penable = 1;    //move to ACCESS
    
    while(~stimIf.pready) #clock_period;
         
  end
 end

  //====================================================//
  //-----------------------Extreme----------------------//
  //====================================================//
  //---------------------Write data---------------------//
  stimIf.psel = 1;       //move to SETUP
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  stimIf.pwrite = 1;
  
  stimIf.paddr = `NUMBER_OF_PIXELS;
  #clock_period
    
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 1;    //move to ACCESS
    
  while(~stimIf.pready) #clock_period;
      
  //----------------------Read data---------------------//
  //-------------------Weights & bias-------------------//
  stimIf.psel = 1;       //move to SETUP
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  stimIf.pwrite = 0;
  
  stimIf.paddr = `NUMBER_OF_PIXELS;
  #clock_period
    
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 1;    //move to ACCESS
  
  while(~stimIf.pready) #clock_period;
    
  //----------------------Bias only---------------------//
  stimIf.psel = 1;       //move to SETUP
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  stimIf.pwrite = 0;
  
  stimIf.paddr = `NUMBER_OF_PIXELS+1;
  #clock_period
    
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 1;    //move to ACCESS
  
  while(~stimIf.pready) #clock_period;
    
  //====================================================//
  //---------Finish the stimuli - moving to IDLE--------//
  //====================================================//
  stimIf.psel = 0;
  stimIf.past_penable = stimIf.penable;
  stimIf.penable = 0;
  stimIf.past_penable = stimIf.penable;
  //==========================End of real stimuli=========================//
  for (j=0 ; j < 400 ; j = j + 1)
  begin
  for (i = 0 ; i < 20 ; i = i + 1 )
    begin
      #clock_period
  assert(rand_all.randomize());
    stimIf.psel = rand_all.psel;
    stimIf.penable = rand_all.penable;
    stimIf.pwrite = rand_all.pwrite;
    stimIf.pwdata = rand_all.pwdata;
    stimIf.paddr = rand_all.paddr;
    end
    #clock_period
    stimIf.rst = 0;
    #clock_period
    stimIf.rst = 1;
    #(4*clock_period);
end

  for (i = 0 ; i < 1600 ; i = i + 1 )
    begin
      #clock_period
  assert(rand_all.randomize());
    stimIf.psel = rand_all.psel;
    stimIf.penable = rand_all.penable;
    stimIf.pwrite = rand_all.pwrite;
    stimIf.pwdata = rand_all.pwdata;
    stimIf.paddr = rand_all.paddr;
    stimIf.rst = rand_all.rst;
    end  
  
end
endmodule